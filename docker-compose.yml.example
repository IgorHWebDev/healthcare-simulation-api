version: '3.8'

services:
  iqhis-main:
    build:
      context: .
      dockerfile: Dockerfile.iqhis
    volumes:
      - ./config:/app/config
      - ./data:/app/data
    depends_on:
      - quantum-agent
      - autogen-coordinator
      - zeta-quantum
      - postgres
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - M3_OPTIMIZER_ENABLED=${M3_OPTIMIZER_ENABLED:-true}
      - METAL_FRAMEWORK_ENABLED=${METAL_FRAMEWORK_ENABLED:-true}
      - BATCH_SIZE=${BATCH_SIZE:-256}
      - MAX_PARALLEL_CIRCUITS=${MAX_PARALLEL_CIRCUITS:-1000}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - iqhis-net

  quantum-agent:
    build:
      context: .
      dockerfile: Dockerfile.quantum
    environment:
      - QUANTUM_ALGORITHM=Kyber1024
      - KEY_ROTATION_HOURS=24
      - METAL_ENABLED=true
    volumes:
      - ./quantum/keys:/app/keys
    networks:
      - iqhis-net

  zeta-quantum:
    build:
      context: .
      dockerfile: Dockerfile.zeta
    environment:
      - QISKIT_BACKEND=aer_simulator
      - NUM_QUBITS=4
      - METAL_ENABLED=true
      - HPC_ENABLED=true
    volumes:
      - ./quantum/circuits:/app/circuits
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - iqhis-net

  autogen-coordinator:
    build:
      context: .
      dockerfile: Dockerfile.autogen
    environment:
      - MODEL_CONFIG_PATH=/app/config/autogen.yaml
      - METAL_ENABLED=true
    depends_on:
      - quantum-agent
      - zeta-quantum
      - ollama
    networks:
      - iqhis-net

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ./models:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - iqhis-net

  hpc-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.hpc
    environment:
      - MAX_PARALLEL_CIRCUITS=1000
      - BATCH_SIZE=256
      - OPTIMIZATION_LEVEL=3
    volumes:
      - ./hpc:/app/hpc
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - iqhis-net

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - iqhis-net

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_SECRET=${GRAFANA_SECRET}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - iqhis-net

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_SECRET=${DB_SECRET}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iqhis-net

  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_SECRET}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - iqhis-net

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  redis_data:

networks:
  iqhis-net:
    driver: bridge